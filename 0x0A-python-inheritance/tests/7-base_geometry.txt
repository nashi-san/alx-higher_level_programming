The ``Base Geometry`` module
================================

Using ``BaseGeometry``
----------------

This is an example text file in reStructuredText format.
First import ``BaseGeometry`` from the ``7-base_geometry'`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:
>>> geo = BaseGeometry()
>>> geo.area()
Traceback (most recent call last):
	...
Exception: area() is not implemented

>>> geo = BaseGeometry()
>>> geo.integer_validator("width", 10)
>>> geo.integer_validator("height", "invalid")
Traceback (most recent call last):
	...
TypeError: height must be an integer

>>> geo.integer_validator("side", 0)
Traceback (most recent call last):
	...
ValueError: side must be greater than 0

>>> geometry = BaseGeometry()
>>> geometry.integer_validator("width", 5)

>>> geometry.area(1)
Traceback (most recent call last):
TypeError: area() takes 1 positional argument but 2 were given

>>> geometry = BaseGeometry()
>>> type(geometry)
<class '7-base_geometry.BaseGeometry'>

>>> geometry.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> geometry.integer_validator("alx", 13.2)
Traceback (most recent call last):
TypeError: alx must be an integer

>>> geometry.integer_validator(13, 13, 13)
Traceback (most recent call last):
TypeError: integer_validator() takes 3 positional arguments but 4 were given

